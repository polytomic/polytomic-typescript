/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as PolytomicApi from "../../..";
export declare namespace Users {
    interface Options {
        environment?: core.Supplier<environments.PolytomicApiEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
    }
}
export declare class Users {
    protected readonly _options: Users.Options;
    constructor(_options: Users.Options);
    /**
     * > ðŸš§ Requires partner key
     * >
     * > User endpoints are only accessible using [partner keys](https://docs.polytomic.com/reference/authentication#partner-keys)
     * @throws {@link PolytomicApi.UnauthorizedError}
     */
    apiV2ListUsers(orgId: string, requestOptions?: Users.RequestOptions): Promise<PolytomicApi.V2ListUsersEnvelope>;
    /**
     * > ðŸš§ Requires partner key
     * >
     * > User endpoints are only accessible using [partner keys](https://docs.polytomic.com/reference/authentication#partner-keys)
     * @throws {@link PolytomicApi.UnauthorizedError}
     */
    apiV2CreateUser(orgId: string, request: PolytomicApi.V2CreateUserRequestSchema, requestOptions?: Users.RequestOptions): Promise<PolytomicApi.V2UserEnvelope>;
    /**
     * > ðŸš§ Requires partner key
     * >
     * > User endpoints are only accessible using [partner keys](https://docs.polytomic.com/reference/authentication#partner-keys)
     * @throws {@link PolytomicApi.UnauthorizedError}
     */
    apiV2GetUser(id: string, orgId: string, requestOptions?: Users.RequestOptions): Promise<PolytomicApi.V2UserEnvelope>;
    /**
     * > ðŸš§ Requires partner key
     * >
     * > User endpoints are only accessible using [partner keys](https://docs.polytomic.com/reference/authentication#partner-keys)
     * @throws {@link PolytomicApi.UnauthorizedError}
     */
    apiV2RemoveUser(id: string, orgId: string, requestOptions?: Users.RequestOptions): Promise<PolytomicApi.V2UserEnvelope>;
    /**
     * > ðŸš§ Requires partner key
     * >
     * > User endpoints are only accessible using [partner keys](https://docs.polytomic.com/reference/authentication#partner-keys)
     * @throws {@link PolytomicApi.UnauthorizedError}
     */
    apiV2UpdateUser(id: string, orgId: string, request: PolytomicApi.V2UpdateUserRequestSchema, requestOptions?: Users.RequestOptions): Promise<PolytomicApi.V2UserEnvelope>;
    /**
     * > ðŸš§ Requires partner key
     * >
     * > User endpoints are only accessible using [partner keys](https://docs.polytomic.com/reference/authentication#partner-keys)
     * @throws {@link PolytomicApi.UnauthorizedError}
     */
    apiV2CreateApiKey(orgId: string, id: string, request?: PolytomicApi.ApiV2CreateApiKeyRequest, requestOptions?: Users.RequestOptions): Promise<PolytomicApi.V2ApiKeyResponseEnvelope>;
    protected _getAuthorizationHeader(): Promise<string>;
}
